<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/com/habib/stockmarket/Main.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/com/habib/stockmarket/Main.java" />
              <option name="updatedContent" value="package com.habib.stockmarket;&#10;&#10;import com.habib.stockmarket.core.*;&#10;import com.habib.stockmarket.market.*;&#10;import java.util.ArrayList;&#10;import java.util.List;&#10;&#10;public class Main {&#10;    public static void main(String[] args) {&#10;        System.out.println(&quot;=== Concurrent Stock Trading Simulator - Phase 1 ===\n&quot;);&#10;        &#10;        // Create stock market&#10;        StockMarket stockMarket = new StockMarket();&#10;        &#10;        // Create and register stocks&#10;        stockMarket.registerStock(new Stock(&quot;Apple Inc.&quot;, &quot;AAPL&quot;, 150.0));&#10;        stockMarket.registerStock(new Stock(&quot;Google&quot;, &quot;GOOGL&quot;, 2800.0));&#10;        stockMarket.registerStock(new Stock(&quot;Microsoft&quot;, &quot;MSFT&quot;, 300.0));&#10;        &#10;        // Create shared trade counter&#10;        TradeCounter tradeCounter = new TradeCounter();&#10;        &#10;        // Create and start price updater&#10;        PriceUpdater priceUpdater = new PriceUpdater(stockMarket);&#10;        priceUpdater.start();&#10;        &#10;        // Create traders&#10;        List&lt;Trader&gt; traders = new ArrayList&lt;&gt;();&#10;        List&lt;Thread&gt; traderThreads = new ArrayList&lt;&gt;();&#10;        &#10;        for (int i = 1; i &lt;= 5; i++) {&#10;            Trader trader = new Trader(&quot;T&quot; + i, 10000.0, stockMarket, tradeCounter);&#10;            traders.add(trader);&#10;            &#10;            Thread traderThread = new Thread(trader);&#10;            traderThreads.add(traderThread);&#10;            traderThread.start();&#10;        }&#10;        &#10;        // Print initial market status&#10;        stockMarket.printMarketStatus();&#10;        &#10;        // Run simulation for 60 seconds&#10;        try {&#10;            Thread.sleep(60000);&#10;        } catch (InterruptedException e) {&#10;            Thread.currentThread().interrupt();&#10;        }&#10;        &#10;        // Stop all traders&#10;        System.out.println(&quot;\n=== Stopping Market ===&quot;);&#10;        for (Trader trader : traders) {&#10;            trader.stopTrading();&#10;        }&#10;        &#10;        // Wait for all trader threads to finish&#10;        for (Thread thread : traderThreads) {&#10;            try {&#10;                thread.join();&#10;            } catch (InterruptedException e) {&#10;                Thread.currentThread().interrupt();&#10;            }&#10;        }&#10;        &#10;        // Stop price updater&#10;        priceUpdater.stopUpdating();&#10;        &#10;        // Print final statistics&#10;        printFinalStatistics(traders, tradeCounter, stockMarket);&#10;    }&#10;    &#10;    private static void printFinalStatistics(List&lt;Trader&gt; traders, TradeCounter tradeCounter, StockMarket stockMarket) {&#10;        System.out.println(&quot;\n=== Final Statistics ===&quot;);&#10;        System.out.println(&quot;Total Trades: &quot; + tradeCounter.getTotalTrades());&#10;        &#10;        System.out.println(&quot;\nTrader Final Status:&quot;);&#10;        for (Trader trader : traders) {&#10;            System.out.printf(&quot;Trader %s: Cash=$%.2f, Portfolio=%s%n&quot;, &#10;                             trader.getTraderId(), &#10;                             trader.getCashBalance(), &#10;                             trader.getPortfolio().getAllHoldings());&#10;        }&#10;        &#10;        System.out.println(&quot;\nFinal Stock Prices:&quot;);&#10;        for (Stock stock : stockMarket.getAllStocks()) {&#10;            System.out.println(stock);&#10;        }&#10;        &#10;        System.out.println(&quot;\n=== Simulation Complete ===&quot;);&#10;        System.out.println(&quot;Note: You may notice race conditions in the trade counter!&quot;);&#10;        System.out.println(&quot;This will be fixed in the next phases with proper synchronization.&quot;);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/com/habib/stockmarket/core/Portfolio.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/com/habib/stockmarket/core/Portfolio.java" />
              <option name="updatedContent" value="package com.habib.stockmarket.core;&#10;&#10;import java.util.HashMap;&#10;import java.util.Map;&#10;&#10;public class Portfolio {&#10;    private Map&lt;String, Integer&gt; holdings;&#10;    &#10;    public Portfolio() {&#10;        this.holdings = new HashMap&lt;&gt;();&#10;    }&#10;    &#10;    public void addStock(String symbol, int quantity) {&#10;        holdings.put(symbol, holdings.getOrDefault(symbol, 0) + quantity);&#10;    }&#10;    &#10;    public boolean removeStock(String symbol, int quantity) {&#10;        int currentHolding = holdings.getOrDefault(symbol, 0);&#10;        if (currentHolding &gt;= quantity) {&#10;            holdings.put(symbol, currentHolding - quantity);&#10;            if (holdings.get(symbol) == 0) {&#10;                holdings.remove(symbol);&#10;            }&#10;            return true;&#10;        }&#10;        return false;&#10;    }&#10;    &#10;    public int getHolding(String symbol) {&#10;        return holdings.getOrDefault(symbol, 0);&#10;    }&#10;    &#10;    public Map&lt;String, Integer&gt; getAllHoldings() {&#10;        return new HashMap&lt;&gt;(holdings);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/com/habib/stockmarket/core/Stock.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/com/habib/stockmarket/core/Stock.java" />
              <option name="updatedContent" value="package com.habib.stockmarket.core;&#10;&#10;public class Stock {&#10;    private final String name;&#10;    private final String symbol;&#10;    private volatile double currentPrice;&#10;    &#10;    public Stock(String name, String symbol, double initialPrice) {&#10;        this.name = name;&#10;        this.symbol = symbol;&#10;        this.currentPrice = initialPrice;&#10;    }&#10;    &#10;    public synchronized void updatePrice(double newPrice) {&#10;        this.currentPrice = newPrice;&#10;    }&#10;    &#10;    public String getName() {&#10;        return name;&#10;    }&#10;    &#10;    public String getSymbol() {&#10;        return symbol;&#10;    }&#10;    &#10;    public double getCurrentPrice() {&#10;        return currentPrice;&#10;    }&#10;    &#10;    @Override&#10;    public String toString() {&#10;        return String.format(&quot;%s (%s): $%.2f&quot;, name, symbol, currentPrice);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/com/habib/stockmarket/core/TradeCounter.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/com/habib/stockmarket/core/TradeCounter.java" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/com/habib/stockmarket/core/Trader.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/com/habib/stockmarket/core/Trader.java" />
              <option name="updatedContent" value="package com.habib.stockmarket.core;&#10;&#10;import com.habib.stockmarket.market.StockMarket;&#10;import java.util.Random;&#10;&#10;public class Trader implements Runnable {&#10;    private final String traderId;&#10;    private double cashBalance;&#10;    private final Portfolio portfolio;&#10;    private final StockMarket stockMarket;&#10;    private final TradeCounter tradeCounter;&#10;    private final Random random;&#10;    private volatile boolean marketOpen = true;&#10;    &#10;    public Trader(String traderId, double initialCash, StockMarket stockMarket, TradeCounter tradeCounter) {&#10;        this.traderId = traderId;&#10;        this.cashBalance = initialCash;&#10;        this.portfolio = new Portfolio();&#10;        this.stockMarket = stockMarket;&#10;        this.tradeCounter = tradeCounter;&#10;        this.random = new Random();&#10;    }&#10;    &#10;    @Override&#10;    public void run() {&#10;        System.out.println(&quot;Trader &quot; + traderId + &quot; started trading with $&quot; + cashBalance);&#10;        &#10;        while (marketOpen) {&#10;            try {&#10;                // Wait 3-5 seconds randomly&#10;                Thread.sleep(3000 + random.nextInt(2000));&#10;                &#10;                // Pick random stock&#10;                Stock stock = stockMarket.getRandomStock();&#10;                if (stock == null) continue;&#10;                &#10;                // Randomly decide buy or sell&#10;                boolean shouldBuy = random.nextBoolean();&#10;                &#10;                if (shouldBuy) {&#10;                    executeBuy(stock);&#10;                } else {&#10;                    executeSell(stock);&#10;                }&#10;                &#10;            } catch (InterruptedException e) {&#10;                Thread.currentThread().interrupt();&#10;                break;&#10;            }&#10;        }&#10;        &#10;        System.out.println(&quot;Trader &quot; + traderId + &quot; stopped trading. Final balance: $&quot; + cashBalance);&#10;    }&#10;    &#10;    private void executeBuy(Stock stock) {&#10;        double price = stock.getCurrentPrice();&#10;        if (cashBalance &gt;= price) {&#10;            cashBalance -= price;&#10;            portfolio.addStock(stock.getSymbol(), 1);&#10;            tradeCounter.increment(); // Race condition here!&#10;            &#10;            System.out.printf(&quot;Trader %s BOUGHT 1 %s at $%.2f (Cash: $%.2f)%n&quot;, &#10;                             traderId, stock.getSymbol(), price, cashBalance);&#10;        }&#10;    }&#10;    &#10;    private void executeSell(Stock stock) {&#10;        if (portfolio.getHolding(stock.getSymbol()) &gt; 0) {&#10;            double price = stock.getCurrentPrice();&#10;            portfolio.removeStock(stock.getSymbol(), 1);&#10;            cashBalance += price;&#10;            tradeCounter.increment(); // Race condition here!&#10;            &#10;            System.out.printf(&quot;Trader %s SOLD 1 %s at $%.2f (Cash: $%.2f)%n&quot;, &#10;                             traderId, stock.getSymbol(), price, cashBalance);&#10;        }&#10;    }&#10;    &#10;    public void stopTrading() {&#10;        marketOpen = false;&#10;    }&#10;    &#10;    public String getTraderId() {&#10;        return traderId;&#10;    }&#10;    &#10;    public double getCashBalance() {&#10;        return cashBalance;&#10;    }&#10;    &#10;    public Portfolio getPortfolio() {&#10;        return portfolio;&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/com/habib/stockmarket/market/PriceUpdater.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/com/habib/stockmarket/market/PriceUpdater.java" />
              <option name="updatedContent" value="package com.habib.stockmarket.market;&#10;&#10;import com.habib.stockmarket.core.Stock;&#10;import java.util.Random;&#10;&#10;public class PriceUpdater extends Thread {&#10;    private final StockMarket stockMarket;&#10;    private final Random random;&#10;    private volatile boolean running = true;&#10;    &#10;    public PriceUpdater(StockMarket stockMarket) {&#10;        this.stockMarket = stockMarket;&#10;        this.random = new Random();&#10;        setDaemon(true); // Dies when main thread dies&#10;    }&#10;    &#10;    @Override&#10;    public void run() {&#10;        System.out.println(&quot;Price updater started&quot;);&#10;        &#10;        while (running) {&#10;            try {&#10;                Thread.sleep(10000); // Wait 10 seconds&#10;                &#10;                // Pick random stock and update price&#10;                Stock stock = stockMarket.getRandomStock();&#10;                if (stock != null) {&#10;                    updateStockPrice(stock);&#10;                }&#10;                &#10;                // Print market status&#10;                stockMarket.printMarketStatus();&#10;                &#10;            } catch (InterruptedException e) {&#10;                Thread.currentThread().interrupt();&#10;                break;&#10;            }&#10;        }&#10;        &#10;        System.out.println(&quot;Price updater stopped&quot;);&#10;    }&#10;    &#10;    private void updateStockPrice(Stock stock) {&#10;        double currentPrice = stock.getCurrentPrice();&#10;        // Random change between -5% to +5%&#10;        double changePercent = (random.nextDouble() - 0.5) * 0.1; // -0.05 to +0.05&#10;        double newPrice = currentPrice * (1 + changePercent);&#10;        &#10;        // Ensure price doesn't go below $1&#10;        newPrice = Math.max(newPrice, 1.0);&#10;        &#10;        stock.updatePrice(newPrice);&#10;        &#10;        System.out.printf(&quot;PRICE UPDATE: %s price changed from $%.2f to $%.2f (%.2f%%)%n&quot;,&#10;                         stock.getSymbol(), currentPrice, newPrice, changePercent * 100);&#10;    }&#10;    &#10;    public void stopUpdating() {&#10;        running = false;&#10;        interrupt();&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/src/com/habib/stockmarket/market/StockMarket.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/com/habib/stockmarket/market/StockMarket.java" />
              <option name="updatedContent" value="package com.habib.stockmarket.market;&#10;&#10;import com.habib.stockmarket.core.Stock;&#10;import java.util.*;&#10;&#10;public class StockMarket {&#10;    private final List&lt;Stock&gt; stocks;&#10;    private final Map&lt;String, Stock&gt; stockRegistry;&#10;    private final Random random;&#10;    &#10;    public StockMarket() {&#10;        this.stocks = new ArrayList&lt;&gt;();&#10;        this.stockRegistry = new HashMap&lt;&gt;(); // Not thread-safe!&#10;        this.random = new Random();&#10;    }&#10;    &#10;    public void registerStock(Stock stock) {&#10;        stocks.add(stock);&#10;        stockRegistry.put(stock.getSymbol(), stock);&#10;    }&#10;    &#10;    public Stock getStock(String symbol) {&#10;        return stockRegistry.get(symbol);&#10;    }&#10;    &#10;    public Stock getRandomStock() {&#10;        if (stocks.isEmpty()) return null;&#10;        return stocks.get(random.nextInt(stocks.size()));&#10;    }&#10;    &#10;    public List&lt;Stock&gt; getAllStocks() {&#10;        return new ArrayList&lt;&gt;(stocks);&#10;    }&#10;    &#10;    public void printMarketStatus() {&#10;        System.out.println(&quot;\n=== Market Status ===&quot;);&#10;        for (Stock stock : stocks) {&#10;            System.out.println(stock);&#10;        }&#10;        System.out.println(&quot;====================\n&quot;);&#10;    }&#10;}&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>